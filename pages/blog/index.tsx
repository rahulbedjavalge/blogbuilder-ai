import { GetServerSideProps } from 'next'
import { useState } from 'react'
import Head from 'next/head'
import BlogCard from '../../components/BlogCard'
import { supabase, Blog } from '../../utils/supabaseClient'

interface BlogListProps {
  blogs: Blog[]
  totalCount: number
}

export default function BlogList({ blogs: initialBlogs, totalCount }: BlogListProps) {
  const [blogs, setBlogs] = useState<Blog[]>(initialBlogs)
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedTag, setSelectedTag] = useState('')
  const [isLoading, setIsLoading] = useState(false)

  // Get unique tags from all blogs
  const allTags = Array.from(new Set(blogs.flatMap(blog => blog.tags)))

  // Filter blogs based on search and tag
  const filteredBlogs = blogs.filter(blog => {
    const matchesSearch = blog.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         blog.content_md.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesTag = !selectedTag || blog.tags.includes(selectedTag)
    return matchesSearch && matchesTag
  })

  const loadMoreBlogs = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase
        .from('blogs')
        .select('*')
        .order('created_at', { ascending: false })
        .range(blogs.length, blogs.length + 11)

      if (error) throw error
      
      if (data) {
        setBlogs([...blogs, ...data])
      }
    } catch (error) {
      console.error('Error loading more blogs:', error)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <>
      <Head>
        <title>All Blog Posts - BlogBuilder AI</title>
        <meta name="description" content="Discover amazing blog posts generated by AI" />
      </Head>
      
      <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="mb-8 text-center">
          <h1 className="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 mb-4">
            All Blog Posts
          </h1>
          <p className="text-gray-600 text-lg sm:text-xl">
            Discover {totalCount} amazing blog posts generated by AI
          </p>
        </div>

        {/* Search and Filter */}
        <div className="bg-white p-4 sm:p-6 rounded-lg shadow-md mb-8">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <input
                type="text"
                placeholder="Search blogs..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all"
              />
            </div>
            <div className="md:w-64">
              <select
                value={selectedTag}
                onChange={(e) => setSelectedTag(e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all"
              >
                <option value="">All Tags</option>
                {allTags.map(tag => (
                  <option key={tag} value={tag}>{tag}</option>
                ))}
              </select>
            </div>
          </div>
          
          {(searchTerm || selectedTag) && (
            <div className="mt-4 text-sm text-gray-600">
              Showing {filteredBlogs.length} of {blogs.length} posts
            </div>
          )}
        </div>

        {/* Blog Grid */}
        {filteredBlogs.length === 0 ? (
          <div className="text-center py-12">
            <div className="max-w-md mx-auto">
              <svg className="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <p className="text-gray-500 text-lg mb-2">
                {searchTerm || selectedTag ? 'No blogs match your search criteria' : 'No blogs found'}
              </p>
              <p className="text-gray-400 text-sm">
                {searchTerm || selectedTag ? 'Try adjusting your search terms' : 'Be the first to create a blog post!'}
              </p>
            </div>
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
              {filteredBlogs.map((blog) => (
                <BlogCard key={blog.id} blog={blog} />
              ))}
            </div>

            {/* Load More Button */}
            {!searchTerm && !selectedTag && blogs.length < totalCount && (
              <div className="text-center">
                <button
                  onClick={loadMoreBlogs}
                  disabled={isLoading}
                  className="px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  {isLoading ? 'Loading...' : 'Load More Posts'}
                </button>
              </div>
            )}
          </>
        )}
      </div>
    </div>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async () => {
  // Get total count
  const { count } = await supabase
    .from('blogs')
    .select('*', { count: 'exact', head: true })

  // Get first 12 blogs
  const { data: blogs, error } = await supabase
    .from('blogs')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(12)

  if (error) {
    console.error('Error fetching blogs:', error)
    return {
      props: {
        blogs: [],
        totalCount: 0,
      },
    }
  }

  return {
    props: {
      blogs: blogs || [],
      totalCount: count || 0,
    },
  }
}
